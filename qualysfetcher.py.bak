import logging

import requests
from requests.auth import HTTPBasicAuth
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

from configuration import Configuration
from api import Api

LOG = logging.getLogger(__name__)

class QualysFetcher():

#    def __init__(self):
#        self.endpoint = endpoint

    def fetch(self, endpoint):
        conf = Configuration().get_endpoint(endpoint)
        session = Api.get_session(endpoint)

        write_to = conf.get("options").get("write_to")
        batch_by = conf.get("options").get("batch_by")
        list_field = conf.get("options").get("list_field")
        list_param = conf.get("options").get("list_param")
        list_from = conf.get("options").get("list_from")

        for req in get_next_request(batch_by):
            parse_output(req)
        

#        if batch_by == "truncation":
#            for batch in batch_truncation(session):
#                pass
#        elif batch_by == "list":
#            file_list = get_list_from_file(list_field, list_from)
#
#            for batch in batch_list(session, file_list, list_param):
#                pass
#
#        try:
#            request = session.get(url, timeout=2)
#            return request
#        except requests.exceptions.ConnectionError as err:
#            LOG.warning(err)
#
#    def batch_truncation():
#        pass
#
#    def batch_list():
#        pass
#
#    def get_list_from_file():
#        pass
